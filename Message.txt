Stock Ticker Message protocol
messages are sent between client and server as json representations of python
dictionaries with two keys:  TYPE, DATA
  TYPE is a string to identify the type of message
  DATA is optional data to go along with the message

TODO: Decide if Messages have 2 distinct types or not:
		1. In-game messages relating specifically to game play/game state
		2. Out-of-game/connection messages
	- And should these programmed in a fundamentally different way?

SENT
BY      TYPE        MEANING                         DATA
-----   ----------  -------------------             ----------------------------------------
n/a     MSG-ERROR   MessageReceiver failed decode   kill the connection, messages malformed
C       initconn    Clients first message to srv    Client name
C       reconn      Reconnect request               {name: XX, id: XX}
C       msg         Cli chat message                string with chat message contents
C       exit        Alert client exit               n/a
C       join-game   Request to join a game          
C       ready-start Signal ready for game start
 S      conn-accept Server accepted                 {id: XX}
 S      chatmsg     Chat Message                    {time: isoformat.utc, playername: str, message: str}
 S      error       Server couldnt process msg      error details
 S      disconnect  A client has disc.              Client name
 S      server-exit Server exiting
 S      joined      A client has joined             {'newplayer': Client name, 'all': tuple-all player names}
 S      playerlist  List of players in game         tuple of strings
 S      servermsg   Generic message from server     string
--- GAME RELATED ---
CS      start       Start game/alert game started   n/a
 S      buysell     Buy/Sell stock                  {reqid: ???, data: [ (shares, purchprice), etc 500, -1500, 0 ...]} 
C       pause       Pause market briefly            n/a
 S      initgame    Player and Market start info    {cash: n, portfolio: [0, 500, 0... etc], market: ((price,div),(price,div),...)}
 S      joinfail    Server refused request to join  {'reason': str}
 S      player      Player's cash & holdings        {cash: n, portfolio: [0, 500, 0... etc]}
 S      approve     Approval of buy/sell            {reqid: ???, approved: bln, order: ((shares, cost), etc), 'cost': n, 'cash': n, 'portfolio': 6 shares, 'reject-reason': str}
 S      trades      Summary of trades               (not sure data yet)
 S      actiontime  Market action coming soon       seconds
 S      roll        Results of die roll             {stock: #, action: 'UP'etc, amount: int}
 S      markettick  Market price change             {stock: #, amount: #, newprice: #, div: bln}
 S      div         Dividend                        {stock: #, amount: #, divpaid: #, playercash: #}
 S      offmarket   Stock went off market           {stock: #, newprice: #, shares: 0, lost: 200}
 S      split       Stock split                     {stock: 0-5, newprice: #, div: bln, shares: (new_total), divpaid: dollars}
 S      gamestat    Game status                     dictionary (very likely to change alot during dev)
 S      gameover    Game has ended                  {(market summary, holdings for all players, cash for all players, net worth for all, winner)}
